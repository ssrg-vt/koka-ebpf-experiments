%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: Koka
file_extensions:
  - kk
  - kki
  - kkc
first_line_match: '\s*(module)\s*((interface)?)\s*(([a-z][\w\-]*/)*[a-z][\w\-]*)'
scope: source.koka
contexts:
  main:
    - include: line_comment
    - include: line_directive
    - include: block_comment
    - include: string
    - include: litstring
    - include: character
    - include: characteresc
    - include: type_app
    - include: top_type
    - include: top_type_type
    - include: top_type_alias
    - include: top_type_struct_args
    - include: top_type_struct
    - include: top_type_interface
    - include: top_type_quantifier
    - include: decl_function
    - include: decl_external
    - include: decl_val
    - include: decl_var
    - include: decl_param
    - include: module_id
    - include: import_id
    - include: import_id2
    - include: libraryop
    - include: libraryid
    - include: dot
    - include: reservedid
    - include: reservedop
    - include: qidentifier
    - include: qconstructor
    - include: identifier
    - include: constructor
    - include: special
    - include: minus
    - include: operator
    - include: wildcard
    - include: number
    - include: inv_character
    - include: whitespace
  block_comment:
    - match: /\*
      captures:
        0: punctuation.definition.comment.koka
      push:
        - meta_scope: comment.block.koka
        - match: \*/
          captures:
            0: punctuation.definition.comment.koka
          pop: true
        - include: block_comment
        - match: '\|(([^\|]|\|\|)*)\|'
          captures:
            1: comment.doc.pre.koka
        - match: '"(([^"]|"")*)"'
          captures:
            1: comment.doc.source.koka
        - match: '''''(.*)'''''
          captures:
            1: comment.doc.emph.koka
        - match: ^\s*""?\s*$
          push:
            - meta_content_scope: comment.doc.block.source.koka
            - match: ^\s*"\s*$
              pop: true
        - match: ^\s*\|\s*$
          push:
            - meta_content_scope: comment.doc.block.pre.koka
            - match: ^\s*\|\s*$
              pop: true
  character:
    - match: '''[^\''\\$]'''
      scope: string.quoted.single.koka
  characteresc:
    - match: '('')(\\([abfnrtv0\\"''\?]|x[\da-fA-F]{2}|u[\da-fA-F]{4}|U[\da-fA-F]{6}))('')'
      captures:
        1: string.quoted.single.koka
        2: constant.character.escape.koka
        3: constant.character.escape.koka
        4: string.quoted.single.koka
  constructor:
    - match: '[A-Z][\w\-]*[\''\?]*|\(,+\)'
      scope: constant.other.constructor.koka
  decl_external:
    - match: '(extern|external)\s+(include|inline)?\s*([a-z][\w\-]*|\([$%&\*\+@!/\\\^~=\.:\-\?\|<>]+\)|\[\])?'
      captures:
        1: keyword.declaration.function.koka
        2: support.function.koka
        3: entity.name.function.koka
  decl_function:
    - match: '(fun|val|var)\s+([a-z][\w\-]*[\''\?]*|\([$%&\*\+@!/\\\^~=\.:\-\?\|<>]+\)|\[\])'
      captures:
        1: keyword.declaration.function.koka
        2: entity.name.function.koka
  decl_function0:
    - match: '(fun)\s*(([a-z][\w\-]*|\([$%&\*\+@!/\\\^~=\.:\-\?\|<>]+\)|\[\]))?\s*(\()'
      captures:
        1: keyword.declaration.function.koka
        3: entity.name.function.koka
        4: punctuation.separator.koka
      push:
        - match: '(?=[\)\{\}\[\]=;]|(infix|infixr|infixl|type|alias|interface|instance|extern|external|fun|fn|val|var|with|con|if|then|else|elif|guard|match|inject|handle|handler|return|module|import|as|public|private|abstract|cont)(?![\w\-?'']))'
          captures:
            0: invalid.keyword.koka
          pop: true
        - include: fun_parameters
  decl_param:
    - match: '([a-z][\w\-]*[\''\?]*)\s*(?=:)'
      scope: entity.name.param.koka
  decl_val:
    - match: '(((val|use)\s+)?)(([a-z][\w\-]*[\''\?]*)|\([$%&\*\+@!/\\\^~=\.:\-\?\|<>]+\))\s*(=)(?![$%&\*\+@!/\\\^~=\.:\-\|<>])'
      captures:
        3: keyword.declaration.val.koka
        5: entity.name.val.koka
        6: keyword.other.koka
  decl_var:
    - match: '(var)\s+([a-z][\w\-]*[\''\?]*|\([$%&\*\+@!/\\\^~=\.:\-\?\|<>]+\))'
      captures:
        1: keyword.declaration.var.koka
        2: entity.name.var.koka
  dot:
    - match: \.
      scope: keyword.dot.koka
  fun_parameters:
    - include: param_identifier
    - match: '[,]'
      scope: punctuation.separator.koka
    - include: top_type
  identifier:
    - match: '[a-z][\w\-]*[\''\?]*'
      scope: variable.koka
  import_id:
    - match: '(import)(\s+(([a-z][\w\-]*/)*[a-z][\w\-]*)(\s+(=)(\s+(([a-z][\w\-]*/)*[a-z][\w\-]*))?))'
      captures:
        1: keyword.koka
        3: entity.name.class.module.koka
        6: keyword.koka
        8: entity.name.class.module.koka
  import_id2:
    - match: '(import)(\s+(([a-z][\w\-]*/)*[a-z][\w\-]*))'
      captures:
        1: keyword.koka
        3: entity.name.class.module.koka
  inv_character:
    - match: '''([^''\\\n]|\\(.|x..|u....|U......))''|''$|''''?'
      scope: invalid.string.quoted.single.koka
  libraryid:
    - match: '(repeat|for|foreach|while|foreach-indexed|inline|cs|js|file|ref|assigned|resume|cont)(?![\w\-?''])'
      scope: support.function.koka
  libraryop:
    - match: '(!)(?![$%&\*\+@!/\\\^~=\.:\-\?\|<>])'
      scope: support.function.koka
  line_comment:
    - match: //
      captures:
        0: punctuation.definition.comment.koka
      push:
        - meta_scope: comment.line.double-slash.koka
        - match: $
          pop: true
        - match: '\|(([^\|]|\|\|)*)\|'
          captures:
            1: comment.doc.pre.koka
        - match: '"(([^"]|"")*)"'
          captures:
            1: comment.doc.source.koka
        - match: '''''(.*)'''''
          captures:
            1: comment.doc.emph.koka
  line_directive:
    - match: ^\s*#.*$
      scope: meta.preprocessor.koka
  litstring:
    - match: '@"'
      captures:
        0: punctuation.definition.string.koka
      push:
        - meta_scope: string.quoted.double.koka
        - match: '"(?!")'
          captures:
            0: punctuation.definition.string.koka
          pop: true
        - match: '[^"]+'
          scope: string.quoted.double.regular.koka
        - match: '""'
          scope: constant.character.escape.koka
  minus:
    - match: '-(?![$%&\*\+@!/\\\^~=\.:\-\?\|<>])'
      scope: variable.operator.minus.koka
  module_id:
    - match: '(module)\s*((interface)?)\s*(([a-z][\w\-]*/)*[a-z][\w\-]*)'
      captures:
        1: keyword.other.koka
        3: keyword.other.koka
        4: entity.name.class.module.koka
  number:
    - match: '-?(?:0[xX][\da-fA-F]+(\.[\da-fA-F]+)?([pP][\-+]?\d+)?|\d+(\.\d+([eE][\-+]?\d+)?)?|ε|ω)'
      scope: constant.numeric.koka
  operator:
    - match: '[$%&\*\+@!/\\\^~=\.:\-\?\|<>]+'
      scope: variable.operator.koka
  param_identifier:
    - match: '([a-z][\w\-]*[\''\?]*)\s*(?=[:,\)])'
      scope: entity.name.function.koka
  qconstructor:
    - match: '([a-z][\w\-]*/)([A-Z][\w\-]*[\''\?]*)'
      captures:
        1: entity.name.class.module.koka
        2: constant.other.constructor.koka
  qidentifier:
    - match: '([a-z][\w\-]*/)+([a-z][\w\-]*[\''\?]*)'
      captures:
        1: entity.name.class.module.koka
        2: variable.koka
  reservedid:
    - match: '(infix|infixr|infixl|prefix|postfix|type|cotype|rectype|struct|alias|forall|exists|some|interface|instance|with|extern|external|fun|function|val|var|use|using|con|if|then|else|elif|guard|match|mask|handle|handler|named|return|module|import|as|in|pub|abstract|effect)(?![\w\-?''])'
      scope: keyword.other.koka
  reservedop:
    - match: '(=|\->|:|\.|:=)(?![$%&\*\+@!/\\\^~=\.:\-\?\|<>])'
      scope: keyword.koka
  special:
    - match: '[{}\(\)\[\];,]'
      scope: punctuation.separator.koka
  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.koka
      push:
        - meta_scope: string.quoted.double.koka
        - match: '"|$'
          captures:
            0: punctuation.definition.string.koka
          pop: true
        - match: '([^"\\]|\\.)+$'
          scope: invalid.string.quoted.double.koka
        - match: '[^"\\]+'
          scope: string.quoted.double.regular.koka
        - match: '\\([abfnrtvz0\\"''\?]|x[\da-fA-F]{2}|u[\da-fA-F]{4}|U[\da-fA-F]{6})'
          scope: constant.character.escape.koka
        - match: .
          scope: invalid.string.quoted.double.koka
  top_type:
    - match: '(:(?![$%&\*\+@!\\\^~=\.:\-\|<>]))|(with|iff|when|in)(?![\w\-])'
      captures:
        1: storage.type.koka
        2: keyword.koka
      push:
        - match: '(?=[,\)\{\}\[\]=;"`]|  |(infix|infixr|infixl|type|cotype|rectype|effect|alias|interface|instance|extern|external|fun|function|val|var|use|using|con|if|then|else|elif|guard|match|inject|handle|handler|return|module|import|as|public|private|abstract)(?![\w\-?'']))'
          captures:
            0: invalid.keyword.koka
          pop: true
        - include: type_content_top
  top_type_alias:
    - match: '(alias)\s+([a-z]\w+)'
      captures:
        1: keyword.declaration.type.koka
        2: entity.name.type.storage.type.koka
      push:
        - match: '(?=[,\)\{\}\[\];"`]|(infix|infixr|infixl|type|cotype|rectype|alias|effect|interface|instance|extern|external|fun|function|val|var|use|using|con|if|then|else|elif|guard|match|inject|handle|handler|return|module|import|as|public|private|abstract)(?![\w\-?'']))'
          captures:
            0: invalid.keyword.koka
          pop: true
        - match: '='
          scope: keyword.other.koka
        - include: type_content_top
  top_type_interface:
    - match: '(interface|instance)\s+([A-Z]\w+|<>|<\|>|\(,*\))'
      captures:
        1: keyword.declaration.type.koka
        2: entity.name.type.interface.storage.type.interface.koka
      push:
        - match: '(?=[\)\{\}\[\]=;"`]|(infix|infixr|infixl|type|cotype|rectype|effect|alias|interface|instance|extern|external|fun|function|val|var|use|using|con|if|then|else|elif|guard|match|inject|handle|handler|return|module|import|as|public|private|abstract)(?![\w\-?'']))'
          captures:
            0: punctuation.separator.koka
          pop: true
        - include: type_content_top
  top_type_quantifier:
    - match: (exists|forall|some)(\s*)(<)
      captures:
        1: keyword.koka
        3: storage.type.punctuation.separator.koka
      push:
        - match: '(>)|(?=[\)\{\}\[\]=;"`]|(infix|infixr|infixl|type|cotype|rectype|effect|alias|interface|instance|extern|external|fun|function|val|var|use|using|con|if|then|else|elif|guard|match|inject|handle|handler|return|module|import|as|public|private|abstract)(?![\w\-?'']))'
          captures:
            1: storage.type.punctuation.separator.koka
            2: invalid.keyword.koka
          pop: true
        - include: type_content
  top_type_struct:
    - match: '(struct)\s+([a-z][\w\-]*|\(,*\))'
      captures:
        1: keyword.declaration.type.koka
        2: entity.name.type.storage.type.koka
  top_type_struct_args:
    - match: '(struct)\s+([a-z][\w\-]*|\(,*\))\s*(<)'
      captures:
        1: keyword.declaration.type.koka
        2: entity.name.type.storage.type.koka
        3: storage.type.punctuation.separator.koka
      push:
        - match: '(>)|(?=[\)\{\}\[\]=;"`]|(infix|infixr|infixl|type|cotype|rectype|effect|alias|interface|instance|extern|external|fun|function|val|var|use|using|con|if|then|else|elif|guard|match|inject|handle|handler|return|module|import|as|public|private|abstract)(?![\w\-?'']))'
          captures:
            1: storage.type.punctuation.separator.koka
            2: invalid.keyword.koka
          pop: true
        - include: type_content
  top_type_type:
    - match: '((?:cotype|type|rectype)(?:\s+(?:open|extend))?|effect(?:\s+(?:linear|resource))?)\s+([a-z][\w\-]+|<>|<\|>|\(,*\))'
      captures:
        1: keyword.declaration.type.koka
        2: entity.name.type.storage.type.koka
      push:
        - match: '(?=[\)\{\}\[\]=;"`]|(infix|infixr|infixl|type|cotype|rectype|effect|alias|interface|instance|extern|external|fun|function|val|var|use|using|con|if|then|else|elif|guard|match|inject|handle|handler|return|module|import|as|public|private|abstract)(?![\w\-?'']))'
          captures:
            0: punctuation.separator.koka
          pop: true
        - include: type_content_top
  type_app:
    - match: '<(?![$%&\*\+@!/\\\^~=\.:\-\?\|\s\d()])'
      captures:
        0: storage.type.punctuation.separator.koka
      push:
        - meta_scope: storage.type.koka
        - match: '>'
          captures:
            0: storage.type.punctuation.separator.koka
          pop: true
        - include: type_content
  type_content:
    - include: type_parameter
    - include: type_content_top
  type_content_top:
    - match: '(forall|exists|some|with|in|iff|when|is|if)(?![\w\-])'
      scope: keyword.other.koka
    - match: '(\->|::?|\.)(?![$%&\*\+@!\\\^~=\.:\-\?\|<>])'
      scope: keyword.type.koka
    - include: type_qidentifier
    - include: type_variable
    - include: type_identifier
    - include: type_kind
    - include: type_interface
    - match: \(
      captures:
        0: storage.type.punctuation.separator.koka
      push:
        - meta_scope: storage.type.koka
        - match: \)
          captures:
            0: storage.type.punctuation.separator.koka
          pop: true
        - include: type_content
    - match: '<(?![$%&\*\+@!/\\\^~=\.:\-\?\|])'
      captures:
        0: storage.type.punctuation.separator.koka
      push:
        - meta_scope: storage.type.koka
        - match: '>'
          captures:
            0: storage.type.punctuation.separator.koka
          pop: true
        - include: type_content
    - match: '\['
      captures:
        0: storage.type.punctuation.separator.koka
      push:
        - meta_scope: storage.type.koka
        - match: '\]'
          captures:
            0: storage.type.punctuation.separator.koka
          pop: true
        - include: type_content
    - include: line_comment
    - include: block_comment
    - match: '[;,]|:'
      scope: storage.type.punctuation.separator.koka
  type_identifier:
    - match: '[a-z][\w\-]*[\''\?]*'
      scope: storage.type.constant.koka
  type_interface:
    - match: '[A-Z][\w\-]+[\''\?]*'
      scope: storage.type.interface.koka
  type_kind:
    - match: '[A-Z](?![\w\-])'
      scope: storage.type.kind.koka
  type_parameter:
    - match: '([a-zA-Z][\w\-]*[\''\?]*)\s*:(?!:)'
      captures:
        1: variable.typeparam.koka
  type_qidentifier:
    - match: '([a-z][\w\-]*[\''\?]*/)+'
      scope: entity.name.class.module.koka
  type_variable:
    - match: '([a-z][0-9]*|_[\w\-]*[\''\?]*|self)(?!\w)'
      scope: storage.type.typevar.koka
  whitespace:
    - match: '[ \t]+'
      scope: string.koka
  wildcard:
    - match: '_[\w\-]*[\''\?]*'
      scope: variable.wildcard.koka
